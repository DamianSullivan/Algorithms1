 Assessment Summary

Compilation:  PASSED
Style:        FAILED
Findbugs:     Potential bugs found.
API:          PASSED

Correctness:  20/32 tests passed
Memory:       46/47 tests passed
Timing:       12/24 tests passed

Raw score: 62.91% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

files submitted
----------------------------------
total 24K
-rw-r--r-- 1 5.1K Mar 16 06:44 Deque.java
-rw-r--r-- 1 4.5K Mar 16 06:44 RandomizedQueue.java
-rw-r--r-- 1  816 Mar 16 06:44 Subset.java
-rw-r--r-- 1 4.0K Mar 16 06:44 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Deque.java
*-----------------------------------------------------------
================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
================================================================

% javac Subset.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Deque.java:39:7: Variable 'item' must be private and have accessor methods.
Deque.java:40:13: Variable 'next' must be private and have accessor methods.
Deque.java:41:13: Variable 'prev' must be private and have accessor methods.
RandomizedQueue.java:43:21: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:97:23: The warning 'unchecked' cannot be suppressed at this location.
================================================================


% findbugs *.class
*-----------------------------------------------------------
CPU time limit exceeded (core dumped)
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 14 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(), and removeLast().
p1, p2, p3, and p4 are the relative frequencies of each operation, respectively.

Test 1: Calls to addFirst() and addLast() only
  *     5 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TestDeque.random(TestDeque.java:58)
     TestDeque.test1(TestDeque.java:106)
     TestDeque.main(TestDeque.java:528)

  *    50 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TestDeque.random(TestDeque.java:58)
     TestDeque.test1(TestDeque.java:107)
     TestDeque.main(TestDeque.java:528)

  *   500 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *  1000 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TestDeque.random(TestDeque.java:58)
     TestDeque.test1(TestDeque.java:109)
     TestDeque.main(TestDeque.java:528)

==> FAILED

Test 2: Calls to addFirst() and removeFirst()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
==> passed

Test 3: Calls to addFirst() and removeLast()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     TestDeque.random(TestDeque.java:76)
     TestDeque.test3(TestDeque.java:135)
     TestDeque.main(TestDeque.java:530)

  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     TestDeque.random(TestDeque.java:76)
     TestDeque.test3(TestDeque.java:136)
     TestDeque.main(TestDeque.java:530)

  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     TestDeque.random(TestDeque.java:76)
     TestDeque.test3(TestDeque.java:137)
     TestDeque.main(TestDeque.java:530)

  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     TestDeque.random(TestDeque.java:76)
     TestDeque.test3(TestDeque.java:138)
     TestDeque.main(TestDeque.java:530)

  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     TestDeque.random(TestDeque.java:76)
     TestDeque.test3(TestDeque.java:139)
     TestDeque.main(TestDeque.java:530)

  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     TestDeque.random(TestDeque.java:76)
     TestDeque.test3(TestDeque.java:140)
     TestDeque.main(TestDeque.java:530)

  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     TestDeque.random(TestDeque.java:76)
     TestDeque.test3(TestDeque.java:141)
     TestDeque.main(TestDeque.java:530)

==> FAILED

Test 4: Calls to addLast() and removeLast()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TestDeque.random(TestDeque.java:58)
     TestDeque.test4(TestDeque.java:151)
     TestDeque.main(TestDeque.java:531)

  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TestDeque.random(TestDeque.java:58)
     TestDeque.test4(TestDeque.java:152)
     TestDeque.main(TestDeque.java:531)

  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TestDeque.random(TestDeque.java:58)
     TestDeque.test4(TestDeque.java:153)
     TestDeque.main(TestDeque.java:531)

  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  isEmpty() returns wrong result
    - student   = false
    - reference = true
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  isEmpty() returns wrong result
    - student   = false
    - reference = true
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  isEmpty() returns wrong result
    - student   = false
    - reference = true
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  isEmpty() returns wrong result
    - student   = false
    - reference = true
==> FAILED

Test 5: Calls to addLast() and removeFirst()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
==> passed

Test 6: Calls to addFirst(), addLast(), removeFirst(), and removeLast()
  *     5 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  isEmpty() returns wrong result
    - student   = false
    - reference = true
  *    50 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TestDeque.random(TestDeque.java:58)
     TestDeque.test6(TestDeque.java:183)
     TestDeque.main(TestDeque.java:533)

  *   500 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TestDeque.random(TestDeque.java:58)
     TestDeque.test6(TestDeque.java:184)
     TestDeque.main(TestDeque.java:533)

  *  1000 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TestDeque.random(TestDeque.java:58)
     TestDeque.test6(TestDeque.java:185)
     TestDeque.main(TestDeque.java:533)

  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  isEmpty() returns wrong result
    - student   = false
    - reference = true
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     TestDeque.random(TestDeque.java:76)
     TestDeque.test6(TestDeque.java:187)
     TestDeque.main(TestDeque.java:533)

  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  isEmpty() returns wrong result
    - student   = false
    - reference = true
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     TestDeque.random(TestDeque.java:76)
     TestDeque.test6(TestDeque.java:189)
     TestDeque.main(TestDeque.java:533)

==> FAILED

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==> passed

Test 8: Create multiple deque objects at the same time
==> passed

Test 9: Check iterator() after calls only to addFirst()
      -  student   solution has 0 non-null entries
      -  reference solution has 1000 non-null entries
      -  1000 missing entries in student solution, including: 1000
==> FAILED

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(), removeFirst(), and removeLast()
      -  student   solution has 0 non-null entries
      -  reference solution has 1 non-null entries
      -  1 missing entry in student solution: 1
      iterator failed after applying operation 1
==> FAILED

Test 11: Create two independent iterators to same deque
student   iterator 1 hasNext() = false
student   iterator 2 hasNext() = false
reference iterator   hasNext() = true
student   iterator 1 hasNext() = false
student   iterator 2 hasNext() = false
reference iterator   hasNext() = true
==> FAILED

Test 12: Create Deque objects of different parameterized types
==> passed

Test 13: Check that addFirst() and addLast() throw NullPointerExceptions when inserting null items
==> passed

Test 14: Check that remove() and next() throw the specified exceptions in iterator()
==> passed


Total: 7/14 tests passed!
================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 15 total tests.

Tests 1, 2, 3, and 4 make random calls to enqueue(), dequeue(), and sample().
p1, p2, and p3 are the relative frequencies of each operation, respectively.

Test 1: Calls to enqueue()
  *     5 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *    50 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *   500 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *  1000 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
==> passed

Test 2: Calls to enqueue() and dequeue()
  *     5 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
==> passed

Test 3: Calls to enqueue() and sample()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
==> passed

Test 4: Calls to enqueue(), dequeue(), and sample()
  *     5 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *    50 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *   500 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *  1000 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
==> passed

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==> passed

Test 6: Create multiple randomized queue objects at the same time
==> passed

Test 7: Check that iterator() returns correct items after sequence of enqueue() operations
     java.lang.ArrayIndexOutOfBoundsException: 1000
     RandomizedQueue$RandomizedQueueIterator.next(RandomizedQueue.java:139)
     UtilCOS.compare(UtilCOS.java:547)
     TestRandomizedQueue.test7(TestRandomizedQueue.java:269)
     TestRandomizedQueue.main(TestRandomizedQueue.java:641)

==> FAILED

Test 8: Check that iterator() returns correct items after sequence of enqueue() and dequeue() operations
     java.lang.ArrayIndexOutOfBoundsException: 11
     RandomizedQueue$RandomizedQueueIterator.next(RandomizedQueue.java:139)
     TestRandomizedQueue.test8(TestRandomizedQueue.java:309)
     TestRandomizedQueue.main(TestRandomizedQueue.java:642)

==> FAILED

Test 9: Create two independent iterators to same randomized queue
  *  N = 10
     java.lang.ArrayIndexOutOfBoundsException: 10
     RandomizedQueue$RandomizedQueueIterator.next(RandomizedQueue.java:139)
     TestRandomizedQueue.twoIterators(TestRandomizedQueue.java:349)
     TestRandomizedQueue.test9(TestRandomizedQueue.java:394)
     TestRandomizedQueue.main(TestRandomizedQueue.java:643)

  *  N = 1000
     java.lang.ArrayIndexOutOfBoundsException: 1000
     RandomizedQueue$RandomizedQueueIterator.next(RandomizedQueue.java:139)
     TestRandomizedQueue.twoIterators(TestRandomizedQueue.java:349)
     TestRandomizedQueue.test9(TestRandomizedQueue.java:395)
     TestRandomizedQueue.main(TestRandomizedQueue.java:643)

==> FAILED

Test 10: Create two iterators to different randomized queues
     java.lang.ArrayIndexOutOfBoundsException: 10
     RandomizedQueue$RandomizedQueueIterator.next(RandomizedQueue.java:139)
     UtilCOS.compare(UtilCOS.java:547)
     TestRandomizedQueue.test10(TestRandomizedQueue.java:416)
     TestRandomizedQueue.main(TestRandomizedQueue.java:644)

==> FAILED

Test 11: Create RandomizedQueue objects of different parameterized types
==> passed

Test 12: Check randomness of sample() by enqueueing strings, repeatedly calling
sample(), and counting the frequency of each value.
  *  enqueue strings A to C and sampling 1500 times
  *  enqueue strings A to E and sampling 2500 times
  *  enqueue strings A to H and sampling 4000 times
  *  enqueue strings A to J and sampling 5000 times
==> passed

Test 13: Check randomness of dequeue() by enqueueing strings, repeatedly calling
dequeue() until a specific enqueued string appears.
  *  enqueue strings A to C and call dequeue() until A is dequeued; repeat 1500 times
  *  enqueue strings A to E and call dequeue() until D is dequeued; repeat 2500 times
  *  enqueue strings A to H and call dequeue() until C is dequeued; repeat 4000 times
  *  enqueue strings A to J and call dequeue() until F is dequeued; repeat 5000 times
==> passed

Test 14: Check that NullPointerException is thrown when inserting null items
==> passed

Test 15: Check that remove() and next() throw the specified exceptions in iterator()
     - NoSuchElementException NOT thrown for next()
==> FAILED


Total: 10/15 tests passed!
================================================================

Testing methods in Subset
*-----------------------------------------------------------
Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
E
I
F

% echo "A B C D E F G H I" | java Subset 3
[student solution]
G
A
B

% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
BB
BB
AA
CC
CC
BB
BB
BB

==> passed

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
C

% echo "A B C D E F G H I" | java Subset 5
[student solution]
B
A
I
F
H

% echo "A B C D E F G H I" | java Subset 5
[student solution]
E
A
D
C
I

% echo "A B C D E F G H I" | java Subset 9
[student solution]
G
A
B
E
D
F
H
C
I

% echo "A B C D E F G H I" | java Subset 0
[student solution]

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
the
it
it
was
worst
times
of
the
of
times

% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
Monsieur
really
one
had
we
and
with
suspicion
again.
his

% echo "AA BB BB BB BB BB CC CC " | java Subset 7
[student solution]
BB
BB
BB
AA
BB
CC
BB

==> passed

Test 3: check for randomness
  * 1000 subsets of size 1 from subset10.txt
  * 250 subsets of size 4 from subset10.txt
  * 600 subsets of size 1 from subset6.txt
  * 300 subsets of size 2 from subset6.txt
  * 800 subsets of size 1 from subset8.txt
  * 160 subsets of size 5 from subset8.txt
==> passed

Total: 3/3 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
Running 26 total tests.

Test 1a-1e:
 Measuring total memory usage after inserting N items.

                 N        bytes
----------------------------------------------------------
=> passed        8          424
=> passed       64         3112
=> passed      256        12328
=> passed     1024        49192
=> passed     4096       196648
==> 5/5 tests passed

 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 2a-2e: Measuring total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=> passed        8          472
=> passed       64         3160
=> passed      256        12376
=> passed     1024        49240
=> passed     4096       196696
==> 5/5 tests passed

Memory of Deque after adding N = 2^i + 1 items:
 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 3a-3e: Measuring total memory usage after inserting 2N+1 items
then deleting N items.

                 N        bytes
----------------------------------------------------------
=> passed        8          472
=> passed       64         3160
=> passed      256        12376
=> passed     1024        49240
=> passed     4096       196696
==> 5/5 tests passed

 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 4a-4e: Measuring total memory usage after inserting N items
 and then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=> passed        8           88
=> passed       64           88
=> passed      256           88
=> passed     1024           88
=> passed     4096           88
==> 5/5 tests passed

Memory of Deque after adding N = 2^i items:
 * Student memory = 88.00  (R^2 = 1.000)



Test 5a-5e: Measuring iterator memory usage after inserting N items
 (should not grow with N).

                 N        bytes
----------------------------------------------------------
=> passed        8           32
=> passed       64           32
=> passed      256           32
=> passed     1024           32
=> passed     4096           32
==> 5/5 tests passed

Memory of Deque iterator after adding N = 2^i items:
 * Student memory = 32.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them:
     java.lang.NullPointerException
     Deque.removeLast(Deque.java:141)
     MemoryOfDeque.test6(MemoryOfDeque.java:446)
     MemoryOfDeque.main(MemoryOfDeque.java:521)

Total: 25/26 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
Running 21 total tests.

Test 1a-1d: Measuring total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=> passed       64          568
=> passed      256         2104
=> passed     1024         8248
=> passed     4096        32824
==> 4/4 tests passed


 * Student memory = 8.00 N + 56.00  (R^2 = 1.000)



Test 2a-2d: Measuring total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=> passed       64         1080
=> passed      256         4152
=> passed     1024        16440
=> passed     4096        65592
==> 4/4 tests passed


 * Student memory = 16.00 N + 40.00  (R^2 = 1.000)



Test 3a-3d: Measuring total memory usage after inserting 2N+1 items
then deleting N items.

                 N        bytes
----------------------------------------------------------
=> passed       64         2104
=> passed      256         8248
=> passed     1024        32824
=> passed     4096       131128
==> 4/4 tests passed


 * Student memory = 32.00 N + 24.00  (R^2 = 1.000)



Test 4a-4d: Measuring total memory usage after inserting N items and
 then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=> passed       64           72
=> passed      256           72
=> passed     1024           72
=> passed     4096           72
==> 4/4 tests passed


 * Student memory = 72.00  (R^2 = 1.000)



Test 5a-5d: Measuring iterator memory usage after inserting N items

                 N        bytes
----------------------------------------------------------
=> passed       64          320
=> passed      256         1088
=> passed     1024         4160
=> passed     4096        16448
==> 4/4 tests passed


 * Student   memory = 4.00 N + 64.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them:
==> passed

Total: 21/21 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: addFirst(), addLast(), removeFirst(), and removeLast()

                    N  seconds
------------------------------
     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TimeDeque.run(TimeDeque.java:18)
     TimeDeque.test1(TimeDeque.java:71)
     TimeDeque.main(TimeDeque.java:127)

     java.lang.NullPointerException
     Deque.addLast(Deque.java:101)
     TimeDeque.run(TimeDeque.java:18)
     TimeDeque.test1(TimeDeque.java:72)
     TimeDeque.main(TimeDeque.java:127)

=> FAILED    N=    1024     Test did not complete. Most likely one of your operations is not constant time.
==> 0/6 tests passed


N random calls to next() and hasNext() in iterator()

                    N  seconds
------------------------------
=> passed        1024     0.00
=> passed        4096     0.00
=> passed       16384     0.00
=> passed      128000     0.01
=> passed      256000     0.09
=> passed     1024000     1.09
==> 6/6 tests passed

Total: 6/12 tests passed!
================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: enqueue(), sample(), dequeue(), isEmpty(), and size()

                    N  seconds
----------------------------------
=> passed        1024     0.00
=> passed        4096     0.01
=> passed       16384     0.01
=> passed      128000     0.02
=> passed      256000     0.04
=> passed     1024000     0.18
==> 6/6 tests passed


N random calls to: next() and hasNext() from iterator()

                    N  seconds
----------------------------------
     java.lang.ArrayIndexOutOfBoundsException: 1024
     RandomizedQueue$RandomizedQueueIterator.next(RandomizedQueue.java:139)
     TimeRandomizedQueue.runIterator(TimeRandomizedQueue.java:62)
     TimeRandomizedQueue.test2(TimeRandomizedQueue.java:126)
     TimeRandomizedQueue.main(TimeRandomizedQueue.java:154)

     java.lang.ArrayIndexOutOfBoundsException: 1024
     RandomizedQueue$RandomizedQueueIterator.next(RandomizedQueue.java:139)
     TimeRandomizedQueue.runIterator(TimeRandomizedQueue.java:62)
     TimeRandomizedQueue.test2(TimeRandomizedQueue.java:127)
     TimeRandomizedQueue.main(TimeRandomizedQueue.java:154)

=> FAILED        1024     Test did not complete due to an exception.
==> 0/6 tests passed

Total: 6/12 tests passed!
================================================================



